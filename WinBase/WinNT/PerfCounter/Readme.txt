What is it?
==========
Longhorn introduces a new performance counter architecture, which significantly simplifies a programming model. 
No more DLL at last. Based on this new architecture, this sample presents a simple performance counter provider. 
This provider, which is a Windows console application, exposes two counter sets that generates some performance 
data. For testing purpose, one of the counter set has multiple instances and another has a single instance. Both
counter set expose counters that mimic real performance data. 


Files
=====
Readme.txt:		This file

Makefile:		Make file

main.c:			Sample instrumented code. This could be a target application to be monitored.

PerflibV2SampleProvider.man:	Counter manifest file. This file describes counter information (e.g., counter name,
			type, description)

PerflibV2SampleProvider.c:	Source file that contains default notification callback function templates, 
			and Startup()/Cleanup() routines. This file is generated by ctrpp.exe tool, which is
			included in this Platform SDK.

PerflibV2SampleProvider.h:	Header file that contains structures, constants, pre-generated functions, and global 
			variables definition. This file is generated by ctrpp.exe tool, which is
			included in this Platform SDK.

PerflibV2SampleProvider.rc:	Resource file that contains all localized strings. As PerflibV2SampleProvider.man only contains 
			English strings, so does this file (and localization team can localize strings there).
			This file is generated by ctrpp.exe tool, which is included in this Platform SDK.

PerflibV2SampleProvider_r.h: 	Header file that contains the resource IDs of the string in the PerflibV2SampleProvider.rc file. 
			This file is generated by ctrpp.exe tool, which is included in this Platform SDK.

PerflibV2SampleProvider.vcproj:Visual studio project file.

PerflibV2SampleProvider.sln:	Visual studio solution file.

How to Build
============

Start the Microsoft Platform SDK Longhorn build environment. Copy the sample codes to a location 
where you have a “write permission”. Under the same directory where the sample codes are present, 

	type "nmake"


How to Run
==========

1. Install a manifest: This step is for registering the couter information to the system.

	lodctr /m:PerflibV2SampleProvider.man

2. Copy PerflibV2SampleProvider.exe to the location where the manifest (PerflibV2SampleProvider.man) is present or a location in path.

3. Run the sample provider

	type "PerflibV2SampleProvider.exe"


How to Test
===========

1. Open Perfmon.

	Start -> Run -> Type Perfmon -> ENTER

2. Open the "Add counters" dialog. 
	
	You can see two new objects, "TestMultiInstCounterSet" and "TestSingleInstCounterSet", under the object

3. Add a counter. 

	Choose, for instance, "TestSingleInstanceObject" and its counter, "Sine Wave" and press ADD 


How to uninstall
================ 
If you would like to uninstall the counter, run the following command:

	unlodctr /m:PerflibV2SampleProvider.man
