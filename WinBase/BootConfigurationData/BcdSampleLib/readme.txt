////////////////////////////////////////////////////////////////////
// readme.txt for BcdSampleLib
////////////////////////////////////////////////////////////////////

How to obtain/add the ROOT.WMI Bcd Classes from Visual Studio 2005:
----------------------------------------------------------------------------------------------------

The ROOT.WMI.BcdStore.cs is not a class I wrote but one generated by the WMI subsystem based on the internal BcdStore class in WMI.  
You can create or add such classes to your project thru mgmtclassgen utility on your machine, or even more easily with Visual Studio 2005 
you can add them directly via ServerExplorer.

To create a class like ROOT.WMI.BcdStore.cs (for example) from VS2005, simply open ServerExplorer, navigate the tree down to 
Servers\mymachinename\Management Classes, and then right click the "Management Classes" node and select "Add Classes.." option.

In the ensuing dialog the Bcd management classes are located under ROOT\WMI namespace.  You can add individual BcdClasses or several at
once.  That is how I added for example ROOT.WMI.BcdStore.cs class to the project. 

[note that
http://msdn.microsoft.com/library/en-us/BCD/bcd/bcd_classes.asp     
contains documentation on all the WMI/Bcd classes]

If there are substantial changes to the WMI/Bcd Model (unlikely at this point I think), you should delete and re-add the classes
added from the ServerExplorer to make sure you have the newest classes.  

I am using a namespace of ROOT.WMI for these classes, when you add thru server explorer it may give additional namespaces by default.  You
can choose to use it's namespace mechanism or the one I am using for this project, whichever is easiest for you.


Important Note on LUA (copied from BcdSampleApp's readme.txt) - READ THIS!!!
---------------------------------------------------------------------------------------------------------------------

This project is a new release under Vista and does require LUA behavior to work correctly since accessing Bcd is an admin level behavior. 
To get a final EXE created using this library to work you can right click the exe and select "run as administrator" to cause LUA escalation.

Also, to avoid LUA build bugs or issues with Visual Studio on this project, you should run Visual Studio 2005 itself elevated for convenience.  
You can do this by right clicking on the Visual Studio 2005 link and choose "run as administrator" option, when you startup Visual Studio.  
Otherwise build errors may occur when you run the app within VS2005 based on insufficient rights.  As of the pending new Vista release these 
errors aren't always clear from the UI, sometimes the app just closes without showing a clear reason why.  If it is doing that it may well be an
insufficient rights issue with LUA.

Alternatively if you want automatic LUA behavior by double clicking the BcdSampleApp.exe (or your modified App that you deploy), then you will need 
to add a file like the following below in the same directory as the exe, with the name myApp.exe.manifest (if your app is named myApp.exe).

The contents of this file should be the following xml (this is entire file contents):

<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">   
  <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">
    <security>
      <requestedPrivileges>
        <requestedExecutionLevel level="requireAdministrator" uiAccess="false"></requestedExecutionLevel>
        </requestedPrivileges>
       </security>
  </trustInfo>
</assembly>

A better solution would be to incorporate this manifest directly into the BcdSampleApp.exe as a post install step from Visual Studio 2005,
perhaps using the mt.exe utility (other utilities exist to sign manifest as well, mt is one).  A standard usage for the mt.exe utility might be:

mt -manifest BcdSampleApp.exe.manifest -outputresource:BcdSampleApp.exe;#1

This updates BcdSampleApp.exe's internal manifest to now be the same as the BcdSampleApp.exe.manifest file.  If this approach doesn't work
you will have to use the manifest as an external file and keep it in same folder as your exe app.

Microsoft SDK publishing rules do not usually allow exe's to be published, and your Build Output Path may be either bin/Debug, bin/Release or a 
custom location.  Please copy the included (or your created) manifest file to your correct Build Output Path, and on deployment, make sure you 
deploy the manifest file along with your final exe application.  Remember the manifest must be in same folder to work that exe is in, unless you
are able to embed the manifest file using mt.exe.


BCD/WMI Class Documentation
------------------------------------------------

For more documentation on the new Bcd classes this msdn section may prove useful:

http://msdn.microsoft.com/library/en-us/BCD/bcd/bcd_classes.asp

Project Updates
-----------------

For latest version of this project contact me -- I will try to post project updates to a MS website 
in near future.  Contact info below.

Thanks
------------

Thanks to Nick Elliot, a MS contractor, and Srivatsa, Lee and Vivek in the Bcd Team and Karin in SDK team for helping me to get this out at the 
last minute.  And thanks to my manager Rajesh for encouraging me to explore side projects.  

Hope these samples prove helpful.  We have come a long way since boot.ini.

Scott.Laing@microsoft.com
scottlaingwa@hotmail.com
9/27/06
